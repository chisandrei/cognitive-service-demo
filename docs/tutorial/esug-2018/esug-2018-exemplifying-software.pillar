!!Creating unit tests for the Face API modelLet’s start with a few unit tests checking that our main domain objects are created and initialised correctly, written using the SUnit framework. For the very beginning, we start with a test covering the ==Face== object.
${changes:01-testFaceInitialization-v1.ombu}$Since we will most likely need to reuse this face object in other tests, for example when adding faces to pictures, we can move the creation of the face object to a dedicated method.${changes:02-testFaceInitialization-v2.ombu}$We can run this test, using the Test Runner, to ensure that is actually passes.[[[TestRunner new	packageSearchUpdate: 'Cognitive-Services';	selectAllPackages;	open]]]Next, let’s write a similar test for the initialisation of a ==Picture== object.${changes:03-testPictureInitialization.ombu}$Now that the basic initialisation of faces and pictures is covered, we can write several more tests that link them together.${changes:04-tests-faces-pictures.ombu}$Now we have a first test suite for our application consisting of 5 tests. We can use the Test Runner to check if these tests pass.[[[TestRunner new	packageSearchUpdate: 'Cognitive-Services';	selectAllPackages;	open]]]!! Creating GT Examples for the Face API modelNext, let’s write the same five tests as before, just instead of using SUnit, rely on the GT Examples framework. To show how a GT Example differs from a SUnit test, we take our initial unit test and transform it into an example.TODO: add method widget[[[testFaceInitialization  | face |  face := CSFace new    rectangle: ((860@320) corner: (960@420)).  self assert: face rectangle notNil.  self assert: face containerPicture isNil.]]]To make it an example, all we need to do is add the gtExample annotation to the method. This tells GT Examples that we want this method to be considered an example. Then, we can also return the Face object that we are creating. This is the example object that this example creates.TODO: maybe a diff widget?[[[faceEinstein  <gtExample>  | face |  face := CSFace new    rectangle: ((860@320) corner: (960@420)).  self assert: face rectangle notNil.  self assert: face containerPicture isNil.  ^ face]]]We can now put this method in a class that will contain our examples.${changes:05-example-faceEinstein.ombu}$As in the case of SUnit, we can run this example to check if the assertions defined in the example pass. To run examples we can just inspect them. Any group of examples has a view that allows us to run those examples.[[[	GtExampleGroup new examples: CSDPictureExamples gtExamples]]]aaaa