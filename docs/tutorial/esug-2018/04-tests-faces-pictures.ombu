OmEntry {	#tags : {		#prior : OmNullReference [  ],		#self : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CSDPictureTests,				#isMetaSide : false			},			#name : #faceHabicht,			#protocol : #accessing,			#sourceCode : 'faceHabicht\r\t^ CSFace new\r\t\trectangle: ((279@313) corner: (378@412))',			#stamp : 'AndreiChis 9/6/2018 00:13',			#package : #Cognitive-Services-FaceAPI-Examples		}	}}OmEntry {	#tags : {		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CSDPictureTests,				#isMetaSide : false			},			#name : #faceSolovine,			#protocol : #accessing,			#sourceCode : 'faceSolovine\r\t^ CSFace new\r\t\trectangle: ((622@172) corner: (714@264))',			#stamp : 'AndreiChis 9/6/2018 00:13',			#package : #Cognitive-Services-FaceAPI-Examples		}	}}OmEntry {	#tags : {		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CSDPictureTests,				#isMetaSide : false			},			#name : #createPictureWithFaces,			#protocol : #accessing,			#sourceCode : 'createPictureWithFaces\r  | picture |\r  picture := self createEmptyPicture.\r  picture ensureFacesStorage.\r  picture \r    addFace: self faceEinstein;\r    addFace: self faceHabicht;\r    addFace: self faceSolovine.\r  ^ picture',			#stamp : 'AndreiChis 9/6/2018 00:13',			#package : #Cognitive-Services-FaceAPI-Examples		}	}}OmEntry {	#tags : {		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CSDPictureTests,				#isMetaSide : false			},			#name : #'assertFacesWithNoFormFor:',			#protocol : #accessing,			#sourceCode : 'assertFacesWithNoFormFor: aPicture\r  aPicture faces do: [ :aFace |\r    self assert: aFace containerPicture equals: aPicture.\r    self assert: aFace hasFaceForm not ]',			#stamp : 'AndreiChis 9/6/2018 00:13',			#package : #Cognitive-Services-FaceAPI-Examples		}	}}OmEntry {	#tags : {		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CSDPictureTests,				#isMetaSide : false			},			#name : #testPictureWithFacesAndNoForm,			#protocol : #tests,			#sourceCode : 'testPictureWithFacesAndNoForm\r  | picture |\r  picture := self createPictureWithFaces.\r  self assert: picture faces size equals: 3.\r  self assertFacesWithNoFormFor: picture.',			#stamp : 'AndreiChis 9/6/2018 00:13',			#package : #Cognitive-Services-FaceAPI-Examples		}	}}OmEntry {	#tags : {		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CSDPictureTests,				#isMetaSide : false			},			#name : #testPictureWithNoFacesAndForm,			#protocol : #tests,			#sourceCode : 'testPictureWithNoFacesAndForm\r  | picture |\r  picture := self createEmptyPicture.\r  self assert: picture pictureForm equals: nil.\r  picture ensurePictureForm.\r  self assert: picture pictureForm notNil.\r  self assert: picture pictureForm extent equals: 1280@921',			#stamp : 'AndreiChis 9/6/2018 00:13',			#package : #Cognitive-Services-FaceAPI-Examples		}	}}OmEntry {	#tags : {		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CSDPictureTests,				#isMetaSide : false			},			#name : #'assertFacesWithFormIn:',			#protocol : #assertions,			#sourceCode : 'assertFacesWithFormIn: aPicture\r  aPicture faces do: [ :aFace |\r    self assert: aFace containerPicture equals: aPicture.\r    self assert: aFace hasFaceForm.\r    self assert: aFace faceForm notNil ]',			#stamp : 'AndreiChis 9/6/2018 00:14',			#package : #Cognitive-Services-FaceAPI-Examples		}	}}OmEntry {	#tags : {		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CSDPictureTests,				#isMetaSide : false			},			#name : #testPictureWithFacesAndForm,			#protocol : #tests,			#sourceCode : 'testPictureWithFacesAndForm\r  | picture |\r  picture := self createPictureWithFaces.\r  picture ensurePictureForm.\r  self assert: picture faces size equals: 3.\r  self assertFacesWithFormIn: picture.',			#stamp : 'AndreiChis 9/6/2018 00:14',			#package : #Cognitive-Services-FaceAPI-Examples		}	}}